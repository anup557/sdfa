# gist: oracle for BAKSHEESH cipher in C. The oracle has passed test vectors given in 
# "https://eprint.iacr.org/2023/750.pdf" (page: 27, table: 14).
# ------------------------------------------------------------------------------------------


# If the print details is true then only all the state values will print
# print_details='true'
print_details='false'

def sbox(msg):
    # sbox table for default core
    sbox_table = [0x3, 0x0, 0x6, 0xD, 0xB, 0x5, 0x8, 0xE, 0xC, 0xF, 0x9, 0x2, 0x4, 0xA, 0x7, 0x1]

    cip = [0 for i in range(32)]
    # replacing nibble values of state with sbox values
    for nibble_idx, nibble in enumerate(msg):
        cip[nibble_idx] = sbox_table[nibble]

    if (print_details == "true"):
        print('after sbox:\t', cip)
    
    return cip 


def perm(msg):
    # permutation table of gift
    perm_table = [0, 33, 66, 99, 96, 1, 34, 67, 64, 97, 2, 35, 32, 65, 98, 3, 4, 37, 70, 103, 100, 5, 38, 71, 68, 101, 6, 39, 36, 69, 102, 7, 8, 41, 74, 107, 104, 9, 42, 75, 72, 105, 10, 43, 40, 73, 106, 11, 12, 45, 78, 111, 108, 13, 46, 79, 76, 109, 14, 47, 44, 77, 110, 15, 16, 49, 82, 115, 112, 17, 50, 83, 80, 113, 18, 51, 48, 81, 114, 19, 20, 53, 86, 119, 116, 21, 54, 87, 84, 117, 22, 55, 52, 85, 118, 23, 24, 57, 90, 123, 120, 25, 58, 91, 88, 121, 26, 59, 56, 89, 122, 27, 28, 61, 94, 127, 124, 29, 62, 95, 92, 125, 30, 63, 60, 93, 126, 31]

    # storing the state values into bits
    state_bits = [0 for i in range(128)]
    for nibble in range(32):
        for bit in range(4):
            state_bits[4 * nibble + bit] = (msg[nibble] >> bit) & 0x1 

    # permute the bits
    perm_bits = [0 for i in range(128)]
    for bit in range(128):
        perm_bits[perm_table[bit]] = state_bits[bit]

    # making cip from permute bits
    cip = [0 for i in range(32)]
    for nibble in range(32):
        cip[nibble] = 0;
        for bit in range(4):
            cip[nibble] ^= perm_bits[4 * nibble + bit] << bit;

    if (print_details == "true"):
        print('after p-layer:\t', cip)

    return cip


def add_rc(msg, round_number):
    # round constant table of baksheesh
    rcon_table = [2, 33, 16, 9, 36, 19, 40, 53, 26, 13, 38, 51, 56, 61, 62, 31, 
                  14, 7, 34, 49, 24, 45, 54, 59, 28, 47, 22, 43, 20, 11, 4, 3, 32, 17, 8]

    # round contant positions of baksheesh
    rcon_pos = [8, 13, 19, 35, 67, 106]

    # making the round constant depending upon the round number
    for i in range(6):
        # taking the rc bit in the corresp pos to rcon_bit
        rcon_xor_bit = (rcon_table[round_number]>>i)&1
        rcon_nibble = rcon_pos[i]//4
        rcon_bit = rcon_pos[i]%4

        rcon_xor_val = rcon_xor_bit << rcon_bit
        msg[rcon_nibble] ^= rcon_xor_val

    # for printing purpose
    if (print_details == "true"):
        print('after add-rc:\t', msg)

    return msg


def circ_shift(msg):
    carry_bit_prev = 0
    for i in reversed(range(32)):
        carry_bit = msg[i]&1
        msg[i] = ((msg[i]>>1)|(carry_bit_prev<<3))&0xf
        carry_bit_prev = carry_bit

    msg[31] |= (carry_bit_prev<<3)&0xf

    return msg


def generate_round_keys(key):
    round_key_list = [[] for i in range(NO_OF_ROUNDS + 1)]

    # for the 0-th round, only key xor is there in the key addition
    for round_num in range(NO_OF_ROUNDS):
        round_key_list[round_num] = key.copy()
        key = circ_shift(key).copy()

    round_key_list[NO_OF_ROUNDS] = key.copy()

    # for printing purpose
    if (print_details == "true"):
        print("********************************************************************************")
        print('round keys:')
        print("********************************************************************************")
        for i in range(NO_OF_ROUNDS + 1):
            print('\nfor round ' + str(i) + ': ', end = '')
            for j in reversed(round_key_list[i]):
                print(j, end = ', ')
        print('')

    return round_key_list


def add_round_key(msg, round_key):
    cip = [msg^round_key for msg, round_key in zip(msg, round_key)]

    # for printing purpose
    if (print_details == "true"):
        print('after add-rk:\t', cip)

    return cip


def oracle(msg, original_key, state_list):
    # defining number of rounds for default and core layer
    global NO_OF_ROUNDS
    NO_OF_ROUNDS = 35

    key = original_key.copy()
    round_key_list = generate_round_keys(key)

    # round functions
    for round_num in range(NO_OF_ROUNDS):
        if (print_details == "true"):
            print("\n********************************************************************************")
            print("for round " + str(round_num) + ": ")
            print("********************************************************************************")

        msg = add_round_key(msg, round_key_list[round_num])
        msg = sbox(msg)
        msg = perm(msg)
        msg = add_rc(msg, round_num)

        # copying msg at each round
        state_list[round_num] = msg.copy()

    # key whitening layer in the last round
    if (print_details == "true"):
        print("\n********************************************************************************")
        print("after post whitening:")
        print("********************************************************************************")
    msg = add_round_key(msg, round_key_list[NO_OF_ROUNDS])

    state_list[NO_OF_ROUNDS-1] = msg.copy()

    # for printing purpose
    if (print_details == "true"):
        print("********************************************************************************")

    return state_list

